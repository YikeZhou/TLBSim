From 32540376621d6b98d81b59e01873ac67d1c02ec0 Mon Sep 17 00:00:00 2001
From: Gary Guo <gary@garyguo.net>
Date: Mon, 11 Mar 2019 13:36:20 +0000
Subject: [PATCH 2/8] target/riscv: Fill *tval for illegal instruction
 exception

RISC-V privileged spec 1.10 allows *tval to be set to the faulting
instruction instead of 0. This saves exception handlers from having to
set MSTATUS to read the instruction. This patch adds support for this
change.

Signed-off-by: Gary Guo <gary@garyguo.net>
---
 target/riscv/cpu_helper.c | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/target/riscv/cpu_helper.c b/target/riscv/cpu_helper.c
index cf110e3c9c..020205498d 100644
--- a/target/riscv/cpu_helper.c
+++ b/target/riscv/cpu_helper.c
@@ -21,6 +21,7 @@
 #include "qemu/log.h"
 #include "cpu.h"
 #include "exec/exec-all.h"
+#include "exec/cpu_ldst.h"
 #include "tcg-op.h"
 #include "trace.h"
 
@@ -485,6 +486,17 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         default:
             break;
         }
+
+        /* For illegal instruction faults, we can set tval to be the faulting
+           instruction to facilitate the trap code */
+        if (cause == RISCV_EXCP_ILLEGAL_INST) {
+            tval = cpu_ldl_code(env, env->pc);
+            /* For compressed instructions we need to zero-out upper bits */
+            if (extract32(tval, 0, 2) != 3) {
+                tval &= 0xFFFF;
+            }
+        }
+
         /* ecall is dispatched as one cause so translate based on mode */
         if (cause == RISCV_EXCP_U_ECALL) {
             assert(env->priv <= 3);
-- 
2.17.1

