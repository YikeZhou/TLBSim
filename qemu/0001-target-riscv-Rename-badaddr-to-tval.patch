From 35af4d316db8606c2a2213b874e61283767d217b Mon Sep 17 00:00:00 2001
From: Gary Guo <gary@garyguo.net>
Date: Mon, 11 Mar 2019 13:23:32 +0000
Subject: [PATCH 1/8] target/riscv: Rename badaddr to tval

RISC-V's privileged spec 1.10 changes *badaddr to *tval. Only name
changes are required as the CSR number is kept the same, and the
behaviour of 1.9 is compatible with 1.10.

Signed-off-by: Gary Guo <gary@garyguo.net>
---
 target/riscv/cpu.h        |  7 +++----
 target/riscv/cpu_bits.h   |  1 -
 target/riscv/cpu_helper.c | 12 ++++++------
 target/riscv/csr.c        | 20 ++++++++++----------
 target/riscv/translate.c  |  2 +-
 5 files changed, 20 insertions(+), 22 deletions(-)

diff --git a/target/riscv/cpu.h b/target/riscv/cpu.h
index 7d9f48973f..f14ab8fe8f 100644
--- a/target/riscv/cpu.h
+++ b/target/riscv/cpu.h
@@ -114,7 +114,7 @@ struct CPURISCVState {
 
     target_ulong frm;
 
-    target_ulong badaddr;
+    target_ulong tval;
 
     target_ulong user_ver;
     target_ulong priv_ver;
@@ -151,8 +151,8 @@ struct CPURISCVState {
 
     target_ulong sptbr;  /* until: priv-1.9.1 */
     target_ulong satp;   /* since: priv-1.10.0 */
-    target_ulong sbadaddr;
-    target_ulong mbadaddr;
+    target_ulong stval;
+    target_ulong mtval;
     target_ulong medeleg;
 
     target_ulong stvec;
@@ -162,7 +162,6 @@ struct CPURISCVState {
     target_ulong mtvec;
     target_ulong mepc;
     target_ulong mcause;
-    target_ulong mtval;  /* since: priv-1.10.0 */
 
     target_ulong scounteren;
     target_ulong mcounteren;
diff --git a/target/riscv/cpu_bits.h b/target/riscv/cpu_bits.h
index 7180fccf54..abf0799a2a 100644
--- a/target/riscv/cpu_bits.h
+++ b/target/riscv/cpu_bits.h
@@ -166,7 +166,6 @@
 #define CSR_SBADADDR        0x143
 
 /* Supervisor Protection and Translation */
-#define CSR_SPTBR           0x180
 #define CSR_SATP            0x180
 
 /* Physical Memory Protection */
diff --git a/target/riscv/cpu_helper.c b/target/riscv/cpu_helper.c
index b17f169681..cf110e3c9c 100644
--- a/target/riscv/cpu_helper.c
+++ b/target/riscv/cpu_helper.c
@@ -340,7 +340,7 @@ static void raise_mmu_exception(CPURISCVState *env, target_ulong address,
     default:
         g_assert_not_reached();
     }
-    env->badaddr = address;
+    env->tval = address;
 }
 
 hwaddr riscv_cpu_get_phys_page_debug(CPUState *cs, vaddr addr)
@@ -375,7 +375,7 @@ void riscv_cpu_do_unaligned_access(CPUState *cs, vaddr addr,
     default:
         g_assert_not_reached();
     }
-    env->badaddr = addr;
+    env->tval = addr;
     riscv_raise_exception(env, cs->exception_index, retaddr);
 }
 
@@ -469,7 +469,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
     };
 
     if (!async) {
-        /* set tval to badaddr for traps with address information */
+        /* set tval for traps with address information */
         switch (cause) {
         case RISCV_EXCP_INST_ADDR_MIS:
         case RISCV_EXCP_INST_ACCESS_FAULT:
@@ -480,7 +480,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         case RISCV_EXCP_INST_PAGE_FAULT:
         case RISCV_EXCP_LOAD_PAGE_FAULT:
         case RISCV_EXCP_STORE_PAGE_FAULT:
-            tval = env->badaddr;
+            tval = env->tval;
             break;
         default:
             break;
@@ -506,7 +506,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         env->mstatus = s;
         env->scause = cause | ~(((target_ulong)-1) >> async);
         env->sepc = env->pc;
-        env->sbadaddr = tval;
+        env->stval = tval;
         env->pc = (env->stvec >> 2 << 2) +
             ((async && (env->stvec & 3) == 1) ? cause * 4 : 0);
         riscv_cpu_set_mode(env, PRV_S);
@@ -520,7 +520,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         env->mstatus = s;
         env->mcause = cause | ~(((target_ulong)-1) >> async);
         env->mepc = env->pc;
-        env->mbadaddr = tval;
+        env->mtval = tval;
         env->pc = (env->mtvec >> 2 << 2) +
             ((async && (env->mtvec & 3) == 1) ? cause * 4 : 0);
         riscv_cpu_set_mode(env, PRV_M);
diff --git a/target/riscv/csr.c b/target/riscv/csr.c
index e1d91b6c60..2f00ec87e1 100644
--- a/target/riscv/csr.c
+++ b/target/riscv/csr.c
@@ -534,15 +534,15 @@ static int write_mcause(CPURISCVState *env, int csrno, target_ulong val)
     return 0;
 }
 
-static int read_mbadaddr(CPURISCVState *env, int csrno, target_ulong *val)
+static int read_mtval(CPURISCVState *env, int csrno, target_ulong *val)
 {
-    *val = env->mbadaddr;
+    *val = env->mtval;
     return 0;
 }
 
-static int write_mbadaddr(CPURISCVState *env, int csrno, target_ulong val)
+static int write_mtval(CPURISCVState *env, int csrno, target_ulong val)
 {
-    env->mbadaddr = val;
+    env->mtval = val;
     return 0;
 }
 
@@ -670,15 +670,15 @@ static int write_scause(CPURISCVState *env, int csrno, target_ulong val)
     return 0;
 }
 
-static int read_sbadaddr(CPURISCVState *env, int csrno, target_ulong *val)
+static int read_stval(CPURISCVState *env, int csrno, target_ulong *val)
 {
-    *val = env->sbadaddr;
+    *val = env->stval;
     return 0;
 }
 
-static int write_sbadaddr(CPURISCVState *env, int csrno, target_ulong val)
+static int write_stval(CPURISCVState *env, int csrno, target_ulong val)
 {
-    env->sbadaddr = val;
+    env->stval = val;
     return 0;
 }
 
@@ -895,7 +895,7 @@ static riscv_csr_operations csr_ops[CSR_TABLE_SIZE] = {
     [CSR_MSCRATCH] =            { any,  read_mscratch,    write_mscratch    },
     [CSR_MEPC] =                { any,  read_mepc,        write_mepc        },
     [CSR_MCAUSE] =              { any,  read_mcause,      write_mcause      },
-    [CSR_MBADADDR] =            { any,  read_mbadaddr,    write_mbadaddr    },
+    [CSR_MTVAL] =               { any,  read_mtval,       write_mtval       },
     [CSR_MIP] =                 { any,  NULL,     NULL,     rmw_mip         },
 
     /* Supervisor Trap Setup */
@@ -908,7 +908,7 @@ static riscv_csr_operations csr_ops[CSR_TABLE_SIZE] = {
     [CSR_SSCRATCH] =            { smode, read_sscratch,    write_sscratch    },
     [CSR_SEPC] =                { smode, read_sepc,        write_sepc        },
     [CSR_SCAUSE] =              { smode, read_scause,      write_scause      },
-    [CSR_SBADADDR] =            { smode, read_sbadaddr,    write_sbadaddr    },
+    [CSR_STVAL] =               { smode, read_stval,       write_stval       },
     [CSR_SIP] =                 { smode, NULL,     NULL,     rmw_sip         },
 
     /* Supervisor Protection and Translation */
diff --git a/target/riscv/translate.c b/target/riscv/translate.c
index 2ff6b49487..36fcdedb7c 100644
--- a/target/riscv/translate.c
+++ b/target/riscv/translate.c
@@ -95,7 +95,7 @@ static void generate_exception(DisasContext *ctx, int excp)
 static void generate_exception_mbadaddr(DisasContext *ctx, int excp)
 {
     tcg_gen_movi_tl(cpu_pc, ctx->base.pc_next);
-    tcg_gen_st_tl(cpu_pc, cpu_env, offsetof(CPURISCVState, badaddr));
+    tcg_gen_st_tl(cpu_pc, cpu_env, offsetof(CPURISCVState, tval));
     TCGv_i32 helper_tmp = tcg_const_i32(excp);
     gen_helper_raise_exception(cpu_env, helper_tmp);
     tcg_temp_free_i32(helper_tmp);
-- 
2.17.1

